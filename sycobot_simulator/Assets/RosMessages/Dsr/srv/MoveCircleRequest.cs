//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Dsr
{
    [Serializable]
    public class MoveCircleRequest : Message
    {
        public const string k_RosMessageName = "dsr_msgs/MoveCircle";
        public override string RosMessageName => k_RosMessageName;

        // ____________________________________________________________________________________________
        //  move_circle  
        // ____________________________________________________________________________________________
        public Std.Float64MultiArrayMsg[] pos;
        //  target[2][6]  
        public double[] vel;
        //  set velocity: [mm/sec], [deg/sec]
        public double[] acc;
        //  set acceleration: [mm/sec2], [deg/sec2]
        public double time;
        // = 0.0       # Time [sec] 
        public double radius;
        // =0.0      # Radius under blending mode [mm] 
        public sbyte @ref;
        //  DR_BASE(0), DR_TOOL(1), DR_WORLD(2)
        //  <DR_WORLD is only available in M2.40 or later> 
        public sbyte mode;
        // = 0         # MOVE_MODE_ABSOLUTE=0, MOVE_MODE_RELATIVE=1 
        public double angle1;
        // = 0.0     # angle1 [degree]
        public double angle2;
        // = 0.0     # angle2 [degree]
        public sbyte blendType;
        // = 0    # BLENDING_SPEED_TYPE_DUPLICATE=0, BLENDING_SPEED_TYPE_OVERRIDE=1
        public sbyte syncType;
        // =0      # SYNC = 0, ASYNC = 1

        public MoveCircleRequest()
        {
            this.pos = new Std.Float64MultiArrayMsg[0];
            this.vel = new double[2];
            this.acc = new double[2];
            this.time = 0.0;
            this.radius = 0.0;
            this.@ref = 0;
            this.mode = 0;
            this.angle1 = 0.0;
            this.angle2 = 0.0;
            this.blendType = 0;
            this.syncType = 0;
        }

        public MoveCircleRequest(Std.Float64MultiArrayMsg[] pos, double[] vel, double[] acc, double time, double radius, sbyte @ref, sbyte mode, double angle1, double angle2, sbyte blendType, sbyte syncType)
        {
            this.pos = pos;
            this.vel = vel;
            this.acc = acc;
            this.time = time;
            this.radius = radius;
            this.@ref = @ref;
            this.mode = mode;
            this.angle1 = angle1;
            this.angle2 = angle2;
            this.blendType = blendType;
            this.syncType = syncType;
        }

        public static MoveCircleRequest Deserialize(MessageDeserializer deserializer) => new MoveCircleRequest(deserializer);

        private MoveCircleRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.pos, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.vel, sizeof(double), 2);
            deserializer.Read(out this.acc, sizeof(double), 2);
            deserializer.Read(out this.time);
            deserializer.Read(out this.radius);
            deserializer.Read(out this.@ref);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.angle1);
            deserializer.Read(out this.angle2);
            deserializer.Read(out this.blendType);
            deserializer.Read(out this.syncType);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.pos);
            serializer.Write(this.pos);
            serializer.Write(this.vel);
            serializer.Write(this.acc);
            serializer.Write(this.time);
            serializer.Write(this.radius);
            serializer.Write(this.@ref);
            serializer.Write(this.mode);
            serializer.Write(this.angle1);
            serializer.Write(this.angle2);
            serializer.Write(this.blendType);
            serializer.Write(this.syncType);
        }

        public override string ToString()
        {
            return "MoveCircleRequest: " +
            "\npos: " + System.String.Join(", ", pos.ToList()) +
            "\nvel: " + System.String.Join(", ", vel.ToList()) +
            "\nacc: " + System.String.Join(", ", acc.ToList()) +
            "\ntime: " + time.ToString() +
            "\nradius: " + radius.ToString() +
            "\n@ref: " + @ref.ToString() +
            "\nmode: " + mode.ToString() +
            "\nangle1: " + angle1.ToString() +
            "\nangle2: " + angle2.ToString() +
            "\nblendType: " + blendType.ToString() +
            "\nsyncType: " + syncType.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
