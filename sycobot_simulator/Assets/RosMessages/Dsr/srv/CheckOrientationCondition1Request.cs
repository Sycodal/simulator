//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Dsr
{
    [Serializable]
    public class CheckOrientationCondition1Request : Message
    {
        public const string k_RosMessageName = "dsr_msgs/CheckOrientationCondition1";
        public override string RosMessageName => k_RosMessageName;

        // ____________________________________________________________________________________________
        //  check_orientation_condition(axis, min, max, ref, mod)  
        // ____________________________________________________________________________________________
        public sbyte axis;
        //  DR_AXIS_A(10), DR_AXIS_B(11), DR_AXIS_C(12) 
        public double[] min;
        //  task pos(posx)  
        public double[] max;
        //  task pos(posx)  
        public sbyte @ref;
        // = 0         # DR_BASE(0), DR_TOOL(1), DR_WORLD(2), user_coordinate(101~200)
        //  <DR_WORLD is only available in M2.40 or later> 
        public sbyte mode;
        // = 0         # DR_MV_MOD_ABS(0)

        public CheckOrientationCondition1Request()
        {
            this.axis = 0;
            this.min = new double[6];
            this.max = new double[6];
            this.@ref = 0;
            this.mode = 0;
        }

        public CheckOrientationCondition1Request(sbyte axis, double[] min, double[] max, sbyte @ref, sbyte mode)
        {
            this.axis = axis;
            this.min = min;
            this.max = max;
            this.@ref = @ref;
            this.mode = mode;
        }

        public static CheckOrientationCondition1Request Deserialize(MessageDeserializer deserializer) => new CheckOrientationCondition1Request(deserializer);

        private CheckOrientationCondition1Request(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.axis);
            deserializer.Read(out this.min, sizeof(double), 6);
            deserializer.Read(out this.max, sizeof(double), 6);
            deserializer.Read(out this.@ref);
            deserializer.Read(out this.mode);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.axis);
            serializer.Write(this.min);
            serializer.Write(this.max);
            serializer.Write(this.@ref);
            serializer.Write(this.mode);
        }

        public override string ToString()
        {
            return "CheckOrientationCondition1Request: " +
            "\naxis: " + axis.ToString() +
            "\nmin: " + System.String.Join(", ", min.ToList()) +
            "\nmax: " + System.String.Join(", ", max.ToList()) +
            "\n@ref: " + @ref.ToString() +
            "\nmode: " + mode.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
