//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Dsr
{
    [Serializable]
    public class CheckForceConditionRequest : Message
    {
        public const string k_RosMessageName = "dsr_msgs/CheckForceCondition";
        public override string RosMessageName => k_RosMessageName;

        // ____________________________________________________________________________________________
        //  check_force_condition 
        // This service checks the status of the given force. It disregards the force direction and only compares the sizes. 
        // This condition can be repeated with the while or if statement. Measuring the force, axis is based on the ref coordinate and measuring the moment,
        // axis is based on the tool coordinate.
        // ____________________________________________________________________________________________
        public sbyte axis;
        //  DR_AXIS_X(0), DR_AXIS_Y(1), DR_AXIS_Z(2), DR_AXIS_A(10), DR_AXIS_B(11), DR_AXIS_C(12) 
        public double min;
        //  min >=0.0   
        public double max;
        //  max >=0.0 
        public sbyte @ref;
        // = 0      # DR_BASE(0), DR_TOOL(1), DR_WORLD(2), user coord(101~200)
        //  <DR_WORLD is only available in M2.40 or later> 

        public CheckForceConditionRequest()
        {
            this.axis = 0;
            this.min = 0.0;
            this.max = 0.0;
            this.@ref = 0;
        }

        public CheckForceConditionRequest(sbyte axis, double min, double max, sbyte @ref)
        {
            this.axis = axis;
            this.min = min;
            this.max = max;
            this.@ref = @ref;
        }

        public static CheckForceConditionRequest Deserialize(MessageDeserializer deserializer) => new CheckForceConditionRequest(deserializer);

        private CheckForceConditionRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.axis);
            deserializer.Read(out this.min);
            deserializer.Read(out this.max);
            deserializer.Read(out this.@ref);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.axis);
            serializer.Write(this.min);
            serializer.Write(this.max);
            serializer.Write(this.@ref);
        }

        public override string ToString()
        {
            return "CheckForceConditionRequest: " +
            "\naxis: " + axis.ToString() +
            "\nmin: " + min.ToString() +
            "\nmax: " + max.ToString() +
            "\n@ref: " + @ref.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
