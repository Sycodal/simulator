//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Dsr
{
    [Serializable]
    public class RobotStateRTMsg : Message
    {
        public const string k_RosMessageName = "dsr_msgs/RobotStateRT";
        public override string RosMessageName => k_RosMessageName;

        //  timestamp at the data of data acquisition
        public double time_stamp;
        //  actual joint position from incremental encoder at motor side(used for control) [deg]
        public double[] actual_joint_position;
        //  actual joint position from absolute encoder at link side (used for exact link position) [deg]
        public double[] actual_joint_position_abs;
        //  actual joint velocity from incremental encoder at motor side [deg/s]
        public double[] actual_joint_velocity;
        //  actual joint velocity from absolute encoder at link side [deg/s]
        public double[] actual_joint_velocity_abs;
        //  actual robot tcp position w.r.t. base coordinates: (x, y, z, a, b, c), where (a, b, c) follows Euler ZYZ notation [mm, deg]
        public double[] actual_tcp_position;
        //  actual robot tcp velocity w.r.t. base coordinates [mm, deg/s]
        public double[] actual_tcp_velocity;
        //  actual robot flange position w.r.t. base coordinates: (x, y, z, a, b, c), where (a, b, c) follows Euler ZYZ notation [mm, deg]
        public double[] actual_flange_position;
        //  robot flange velocity w.r.t. base coordinates [mm, deg/s]
        public double[] actual_flange_velocity;
        //  actual motor torque applying gear ratio = gear_ratio * current2torque_constant * motor current [Nm]
        public double[] actual_motor_torque;
        //  estimated joint torque by robot controller [Nm]
        public double[] actual_joint_torque;
        //  calibrated joint torque sensor data [Nm]
        public double[] raw_joint_torque;
        //  calibrated force torque sensor data w.r.t. flange coordinates [N, Nm]
        public double[] raw_force_torque;
        //  estimated external joint torque [Nm]
        public double[] external_joint_torque;
        //  estimated tcp force w.r.t. base coordinates [N, Nm] 
        public double[] external_tcp_force;
        //  target joint position [deg]
        public double[] target_joint_position;
        //  target joint velocity [deg/s]
        public double[] target_joint_velocity;
        //  target joint acceleration [deg/s^2] 
        public double[] target_joint_acceleration;
        //  target motor torque [Nm] 
        public double[] target_motor_torque;
        //  target tcp position w.r.t. base coordinates: (x, y, z, a, b, c), where (a, b, c) follows Euler ZYZ notation [mm, deg] 
        public double[] target_tcp_position;
        //  target tcp velocity w.r.t. base coordinates [mm, deg/s]
        public double[] target_tcp_velocity;
        //  jacobian matrix=J(q) w.r.t. base coordinates
        public Std.Float64MultiArrayMsg[] jacobian_matrix;
        //  gravity torque=g(q) [Nm]
        public double[] gravity_torque;
        //  coriolis matrix=C(q,q_dot)  [6][6]
        public Std.Float64MultiArrayMsg[] coriolis_matrix;
        //  mass matrix=M(q) [6][6]
        public Std.Float64MultiArrayMsg[] mass_matrix;
        //  robot configuration 
        public ushort solution_space;
        //  minimum singular value 
        public double singularity;
        //  current operation speed rate(1~100 %) 
        public double operation_speed_rate;
        //  joint temperature(celsius) 
        public double[] joint_temperature;
        //  controller digital input(16 channel) 
        public ushort controller_digital_input;
        //  controller digital output(16 channel) 
        public ushort controller_digital_output;
        //  controller analog input type(2 channel) 
        public byte[] controller_analog_input_type;
        //  controller analog input(2 channel) 
        public double[] controller_analog_input;
        //  controller analog output type(2 channel) 
        public byte[] controller_analog_output_type;
        //  controller analog output(2 channel) 
        public double[] controller_analog_output;
        //  flange digital input(A-Series: 2 channel, M/H-Series: 6 channel) 
        public byte flange_digital_input;
        //  flange digital output(A-Series: 2 channel, M/H-Series: 6 channel) 
        public byte flange_digital_output;
        //  flange analog input(A-Series: 2 channel, M/H-Series: 4 channel) 
        public double[] flange_analog_input;
        //  strobe count(increased by 1 when detecting setting edge) 
        public byte[] external_encoder_strobe_count;
        //  external encoder count 
        public ushort[] external_encoder_count;
        //  final goal joint position (reserved) 
        public double[] goal_joint_position;
        //  final goal tcp position (reserved) 
        public double[] goal_tcp_position;
        //  ROBOT_MODE_MANUAL(0), ROBOT_MODE_AUTONOMOUS(1), ROBOT_MODE_MEASURE(2) 
        public byte robot_mode;
        //  STATE_INITIALIZING(0), STATE_STANDBY(1), STATE_MOVING(2), STATE_SAFE_OFF(3), STATE_TEACHING(4), STATE_SAFE_STOP(5), STATE_EMERGENCY_STOP, STATE_HOMMING, STATE_RECOVERY, STATE_SAFE_STOP2, STATE_SAFE_OFF2, 
        public byte robot_state;
        //  position control mode, torque mode 
        public ushort control_mode;
        //  Reserved 
        public byte[] reserved;

        public RobotStateRTMsg()
        {
            this.time_stamp = 0.0;
            this.actual_joint_position = new double[6];
            this.actual_joint_position_abs = new double[6];
            this.actual_joint_velocity = new double[6];
            this.actual_joint_velocity_abs = new double[6];
            this.actual_tcp_position = new double[6];
            this.actual_tcp_velocity = new double[6];
            this.actual_flange_position = new double[6];
            this.actual_flange_velocity = new double[6];
            this.actual_motor_torque = new double[6];
            this.actual_joint_torque = new double[6];
            this.raw_joint_torque = new double[6];
            this.raw_force_torque = new double[6];
            this.external_joint_torque = new double[6];
            this.external_tcp_force = new double[6];
            this.target_joint_position = new double[6];
            this.target_joint_velocity = new double[6];
            this.target_joint_acceleration = new double[6];
            this.target_motor_torque = new double[6];
            this.target_tcp_position = new double[6];
            this.target_tcp_velocity = new double[6];
            this.jacobian_matrix = new Std.Float64MultiArrayMsg[0];
            this.gravity_torque = new double[6];
            this.coriolis_matrix = new Std.Float64MultiArrayMsg[0];
            this.mass_matrix = new Std.Float64MultiArrayMsg[0];
            this.solution_space = 0;
            this.singularity = 0.0;
            this.operation_speed_rate = 0.0;
            this.joint_temperature = new double[6];
            this.controller_digital_input = 0;
            this.controller_digital_output = 0;
            this.controller_analog_input_type = new byte[2];
            this.controller_analog_input = new double[2];
            this.controller_analog_output_type = new byte[2];
            this.controller_analog_output = new double[2];
            this.flange_digital_input = 0;
            this.flange_digital_output = 0;
            this.flange_analog_input = new double[4];
            this.external_encoder_strobe_count = new byte[2];
            this.external_encoder_count = new ushort[2];
            this.goal_joint_position = new double[6];
            this.goal_tcp_position = new double[6];
            this.robot_mode = 0;
            this.robot_state = 0;
            this.control_mode = 0;
            this.reserved = new byte[256];
        }

        public RobotStateRTMsg(double time_stamp, double[] actual_joint_position, double[] actual_joint_position_abs, double[] actual_joint_velocity, double[] actual_joint_velocity_abs, double[] actual_tcp_position, double[] actual_tcp_velocity, double[] actual_flange_position, double[] actual_flange_velocity, double[] actual_motor_torque, double[] actual_joint_torque, double[] raw_joint_torque, double[] raw_force_torque, double[] external_joint_torque, double[] external_tcp_force, double[] target_joint_position, double[] target_joint_velocity, double[] target_joint_acceleration, double[] target_motor_torque, double[] target_tcp_position, double[] target_tcp_velocity, Std.Float64MultiArrayMsg[] jacobian_matrix, double[] gravity_torque, Std.Float64MultiArrayMsg[] coriolis_matrix, Std.Float64MultiArrayMsg[] mass_matrix, ushort solution_space, double singularity, double operation_speed_rate, double[] joint_temperature, ushort controller_digital_input, ushort controller_digital_output, byte[] controller_analog_input_type, double[] controller_analog_input, byte[] controller_analog_output_type, double[] controller_analog_output, byte flange_digital_input, byte flange_digital_output, double[] flange_analog_input, byte[] external_encoder_strobe_count, ushort[] external_encoder_count, double[] goal_joint_position, double[] goal_tcp_position, byte robot_mode, byte robot_state, ushort control_mode, byte[] reserved)
        {
            this.time_stamp = time_stamp;
            this.actual_joint_position = actual_joint_position;
            this.actual_joint_position_abs = actual_joint_position_abs;
            this.actual_joint_velocity = actual_joint_velocity;
            this.actual_joint_velocity_abs = actual_joint_velocity_abs;
            this.actual_tcp_position = actual_tcp_position;
            this.actual_tcp_velocity = actual_tcp_velocity;
            this.actual_flange_position = actual_flange_position;
            this.actual_flange_velocity = actual_flange_velocity;
            this.actual_motor_torque = actual_motor_torque;
            this.actual_joint_torque = actual_joint_torque;
            this.raw_joint_torque = raw_joint_torque;
            this.raw_force_torque = raw_force_torque;
            this.external_joint_torque = external_joint_torque;
            this.external_tcp_force = external_tcp_force;
            this.target_joint_position = target_joint_position;
            this.target_joint_velocity = target_joint_velocity;
            this.target_joint_acceleration = target_joint_acceleration;
            this.target_motor_torque = target_motor_torque;
            this.target_tcp_position = target_tcp_position;
            this.target_tcp_velocity = target_tcp_velocity;
            this.jacobian_matrix = jacobian_matrix;
            this.gravity_torque = gravity_torque;
            this.coriolis_matrix = coriolis_matrix;
            this.mass_matrix = mass_matrix;
            this.solution_space = solution_space;
            this.singularity = singularity;
            this.operation_speed_rate = operation_speed_rate;
            this.joint_temperature = joint_temperature;
            this.controller_digital_input = controller_digital_input;
            this.controller_digital_output = controller_digital_output;
            this.controller_analog_input_type = controller_analog_input_type;
            this.controller_analog_input = controller_analog_input;
            this.controller_analog_output_type = controller_analog_output_type;
            this.controller_analog_output = controller_analog_output;
            this.flange_digital_input = flange_digital_input;
            this.flange_digital_output = flange_digital_output;
            this.flange_analog_input = flange_analog_input;
            this.external_encoder_strobe_count = external_encoder_strobe_count;
            this.external_encoder_count = external_encoder_count;
            this.goal_joint_position = goal_joint_position;
            this.goal_tcp_position = goal_tcp_position;
            this.robot_mode = robot_mode;
            this.robot_state = robot_state;
            this.control_mode = control_mode;
            this.reserved = reserved;
        }

        public static RobotStateRTMsg Deserialize(MessageDeserializer deserializer) => new RobotStateRTMsg(deserializer);

        private RobotStateRTMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.time_stamp);
            deserializer.Read(out this.actual_joint_position, sizeof(double), 6);
            deserializer.Read(out this.actual_joint_position_abs, sizeof(double), 6);
            deserializer.Read(out this.actual_joint_velocity, sizeof(double), 6);
            deserializer.Read(out this.actual_joint_velocity_abs, sizeof(double), 6);
            deserializer.Read(out this.actual_tcp_position, sizeof(double), 6);
            deserializer.Read(out this.actual_tcp_velocity, sizeof(double), 6);
            deserializer.Read(out this.actual_flange_position, sizeof(double), 6);
            deserializer.Read(out this.actual_flange_velocity, sizeof(double), 6);
            deserializer.Read(out this.actual_motor_torque, sizeof(double), 6);
            deserializer.Read(out this.actual_joint_torque, sizeof(double), 6);
            deserializer.Read(out this.raw_joint_torque, sizeof(double), 6);
            deserializer.Read(out this.raw_force_torque, sizeof(double), 6);
            deserializer.Read(out this.external_joint_torque, sizeof(double), 6);
            deserializer.Read(out this.external_tcp_force, sizeof(double), 6);
            deserializer.Read(out this.target_joint_position, sizeof(double), 6);
            deserializer.Read(out this.target_joint_velocity, sizeof(double), 6);
            deserializer.Read(out this.target_joint_acceleration, sizeof(double), 6);
            deserializer.Read(out this.target_motor_torque, sizeof(double), 6);
            deserializer.Read(out this.target_tcp_position, sizeof(double), 6);
            deserializer.Read(out this.target_tcp_velocity, sizeof(double), 6);
            deserializer.Read(out this.jacobian_matrix, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.gravity_torque, sizeof(double), 6);
            deserializer.Read(out this.coriolis_matrix, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.mass_matrix, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.solution_space);
            deserializer.Read(out this.singularity);
            deserializer.Read(out this.operation_speed_rate);
            deserializer.Read(out this.joint_temperature, sizeof(double), 6);
            deserializer.Read(out this.controller_digital_input);
            deserializer.Read(out this.controller_digital_output);
            deserializer.Read(out this.controller_analog_input_type, sizeof(byte), 2);
            deserializer.Read(out this.controller_analog_input, sizeof(double), 2);
            deserializer.Read(out this.controller_analog_output_type, sizeof(byte), 2);
            deserializer.Read(out this.controller_analog_output, sizeof(double), 2);
            deserializer.Read(out this.flange_digital_input);
            deserializer.Read(out this.flange_digital_output);
            deserializer.Read(out this.flange_analog_input, sizeof(double), 4);
            deserializer.Read(out this.external_encoder_strobe_count, sizeof(byte), 2);
            deserializer.Read(out this.external_encoder_count, sizeof(ushort), 2);
            deserializer.Read(out this.goal_joint_position, sizeof(double), 6);
            deserializer.Read(out this.goal_tcp_position, sizeof(double), 6);
            deserializer.Read(out this.robot_mode);
            deserializer.Read(out this.robot_state);
            deserializer.Read(out this.control_mode);
            deserializer.Read(out this.reserved, sizeof(byte), 256);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.time_stamp);
            serializer.Write(this.actual_joint_position);
            serializer.Write(this.actual_joint_position_abs);
            serializer.Write(this.actual_joint_velocity);
            serializer.Write(this.actual_joint_velocity_abs);
            serializer.Write(this.actual_tcp_position);
            serializer.Write(this.actual_tcp_velocity);
            serializer.Write(this.actual_flange_position);
            serializer.Write(this.actual_flange_velocity);
            serializer.Write(this.actual_motor_torque);
            serializer.Write(this.actual_joint_torque);
            serializer.Write(this.raw_joint_torque);
            serializer.Write(this.raw_force_torque);
            serializer.Write(this.external_joint_torque);
            serializer.Write(this.external_tcp_force);
            serializer.Write(this.target_joint_position);
            serializer.Write(this.target_joint_velocity);
            serializer.Write(this.target_joint_acceleration);
            serializer.Write(this.target_motor_torque);
            serializer.Write(this.target_tcp_position);
            serializer.Write(this.target_tcp_velocity);
            serializer.WriteLength(this.jacobian_matrix);
            serializer.Write(this.jacobian_matrix);
            serializer.Write(this.gravity_torque);
            serializer.WriteLength(this.coriolis_matrix);
            serializer.Write(this.coriolis_matrix);
            serializer.WriteLength(this.mass_matrix);
            serializer.Write(this.mass_matrix);
            serializer.Write(this.solution_space);
            serializer.Write(this.singularity);
            serializer.Write(this.operation_speed_rate);
            serializer.Write(this.joint_temperature);
            serializer.Write(this.controller_digital_input);
            serializer.Write(this.controller_digital_output);
            serializer.Write(this.controller_analog_input_type);
            serializer.Write(this.controller_analog_input);
            serializer.Write(this.controller_analog_output_type);
            serializer.Write(this.controller_analog_output);
            serializer.Write(this.flange_digital_input);
            serializer.Write(this.flange_digital_output);
            serializer.Write(this.flange_analog_input);
            serializer.Write(this.external_encoder_strobe_count);
            serializer.Write(this.external_encoder_count);
            serializer.Write(this.goal_joint_position);
            serializer.Write(this.goal_tcp_position);
            serializer.Write(this.robot_mode);
            serializer.Write(this.robot_state);
            serializer.Write(this.control_mode);
            serializer.Write(this.reserved);
        }

        public override string ToString()
        {
            return "RobotStateRTMsg: " +
            "\ntime_stamp: " + time_stamp.ToString() +
            "\nactual_joint_position: " + System.String.Join(", ", actual_joint_position.ToList()) +
            "\nactual_joint_position_abs: " + System.String.Join(", ", actual_joint_position_abs.ToList()) +
            "\nactual_joint_velocity: " + System.String.Join(", ", actual_joint_velocity.ToList()) +
            "\nactual_joint_velocity_abs: " + System.String.Join(", ", actual_joint_velocity_abs.ToList()) +
            "\nactual_tcp_position: " + System.String.Join(", ", actual_tcp_position.ToList()) +
            "\nactual_tcp_velocity: " + System.String.Join(", ", actual_tcp_velocity.ToList()) +
            "\nactual_flange_position: " + System.String.Join(", ", actual_flange_position.ToList()) +
            "\nactual_flange_velocity: " + System.String.Join(", ", actual_flange_velocity.ToList()) +
            "\nactual_motor_torque: " + System.String.Join(", ", actual_motor_torque.ToList()) +
            "\nactual_joint_torque: " + System.String.Join(", ", actual_joint_torque.ToList()) +
            "\nraw_joint_torque: " + System.String.Join(", ", raw_joint_torque.ToList()) +
            "\nraw_force_torque: " + System.String.Join(", ", raw_force_torque.ToList()) +
            "\nexternal_joint_torque: " + System.String.Join(", ", external_joint_torque.ToList()) +
            "\nexternal_tcp_force: " + System.String.Join(", ", external_tcp_force.ToList()) +
            "\ntarget_joint_position: " + System.String.Join(", ", target_joint_position.ToList()) +
            "\ntarget_joint_velocity: " + System.String.Join(", ", target_joint_velocity.ToList()) +
            "\ntarget_joint_acceleration: " + System.String.Join(", ", target_joint_acceleration.ToList()) +
            "\ntarget_motor_torque: " + System.String.Join(", ", target_motor_torque.ToList()) +
            "\ntarget_tcp_position: " + System.String.Join(", ", target_tcp_position.ToList()) +
            "\ntarget_tcp_velocity: " + System.String.Join(", ", target_tcp_velocity.ToList()) +
            "\njacobian_matrix: " + System.String.Join(", ", jacobian_matrix.ToList()) +
            "\ngravity_torque: " + System.String.Join(", ", gravity_torque.ToList()) +
            "\ncoriolis_matrix: " + System.String.Join(", ", coriolis_matrix.ToList()) +
            "\nmass_matrix: " + System.String.Join(", ", mass_matrix.ToList()) +
            "\nsolution_space: " + solution_space.ToString() +
            "\nsingularity: " + singularity.ToString() +
            "\noperation_speed_rate: " + operation_speed_rate.ToString() +
            "\njoint_temperature: " + System.String.Join(", ", joint_temperature.ToList()) +
            "\ncontroller_digital_input: " + controller_digital_input.ToString() +
            "\ncontroller_digital_output: " + controller_digital_output.ToString() +
            "\ncontroller_analog_input_type: " + System.String.Join(", ", controller_analog_input_type.ToList()) +
            "\ncontroller_analog_input: " + System.String.Join(", ", controller_analog_input.ToList()) +
            "\ncontroller_analog_output_type: " + System.String.Join(", ", controller_analog_output_type.ToList()) +
            "\ncontroller_analog_output: " + System.String.Join(", ", controller_analog_output.ToList()) +
            "\nflange_digital_input: " + flange_digital_input.ToString() +
            "\nflange_digital_output: " + flange_digital_output.ToString() +
            "\nflange_analog_input: " + System.String.Join(", ", flange_analog_input.ToList()) +
            "\nexternal_encoder_strobe_count: " + System.String.Join(", ", external_encoder_strobe_count.ToList()) +
            "\nexternal_encoder_count: " + System.String.Join(", ", external_encoder_count.ToList()) +
            "\ngoal_joint_position: " + System.String.Join(", ", goal_joint_position.ToList()) +
            "\ngoal_tcp_position: " + System.String.Join(", ", goal_tcp_position.ToList()) +
            "\nrobot_mode: " + robot_mode.ToString() +
            "\nrobot_state: " + robot_state.ToString() +
            "\ncontrol_mode: " + control_mode.ToString() +
            "\nreserved: " + System.String.Join(", ", reserved.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
