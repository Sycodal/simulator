//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Dsr
{
    [Serializable]
    public class RobotStateMsg : Message
    {
        public const string k_RosMessageName = "dsr_msgs/RobotState";
        public override string RosMessageName => k_RosMessageName;

        // ____________________________________________________________________________________________
        //  state of robot
        // ____________________________________________________________________________________________
        public int robot_state;
        //  0 : STATE_INITIALIZING,   1 : STATE_STANDBY,   2 : STATE_MOVING,    3 : STATE_SAFE_OFF
        //  4 : STATE_TEACHING,       5 : STATE_SAFE_STOP, 6 : STATE_EMERGENCY_STOP,
        //  7 : STATE_EMERGENCY_STOP, 8 : STATE_HOMMING,   9 : STATE_RECOVERY,  10: STATE_SAFE_STOP2,     
        //  11: STATE_SAFE_OFF2,      12: STATE_RESERVED1, 13: STATE_RESERVED2, 14: STATE_RESERVED3,
        //  15: STATE_NOT_READY       16: STATE_LAST
        public string robot_state_str;
        //  Convert robot_state id to string
        public sbyte actual_mode;
        //  position control: 0, torque control: 1
        public sbyte actual_space;
        //  joint space: 0, task space: 1
        public double[] current_posj;
        //  current joint angle list [degree] 
        public double[] current_velj;
        //  current joint velocity list []
        public double[] joint_abs;
        //  Position Actual Value in ABS
        public double[] joint_err;
        //  Joint Error
        public double[] target_posj;
        //  target joint angle list [degree] 
        public double[] target_velj;
        //  target joint velocity list []
        public double[] current_posx;
        //  current task angle list []
        public double[] current_tool_posx;
        //  current task tool angle list []
        public double[] current_velx;
        //  current task velocity list []
        public double[] task_err;
        //  Task Error
        public double[] target_velx;
        //  target task velocity list []       
        public double[] target_posx;
        //  target task position list []
        public double[] dynamic_tor;
        //  dynamic torque
        public double[] actual_jts;
        //  joint torque sensor
        public double[] actual_ejt;
        //  external joint torque
        public double[] actual_ett;
        //  external tool torque
        public sbyte[] actual_bk;
        //  brake status 
        public double[] actual_mc;
        //  motor current 
        public double[] actual_mt;
        //  motor temperature
        public sbyte solution_space;
        //  Solution Space (0 ~ 7)
        public double sync_time;
        //  internal clock counter   
        public sbyte[] actual_bt;
        //  cockpit(robot button) info.
        public Std.Float64MultiArrayMsg[] rotation_matrix;
        //  Rotation Matrix [3][3]
        public sbyte[] ctrlbox_digital_input;
        //  Digital Input in Control Box(0 ~ 15 ; 0 : ON, 1 : OFF)
        public sbyte[] ctrlbox_digital_output;
        //  Digital Output in Control Box(0 ~ 15 ; 0 : ON, 1 : OFF)
        public sbyte[] flange_digital_input;
        //  Digital Input in Flange(0 ~ 5 ; 0 : ON, 1 : OFF) x1 port : 0 ~ 2, x2 port : 3 ~ 5
        public sbyte[] flange_digital_output;
        //  Digital Output in Flange(0 ~ 5 ; 0 : ON, 1 : OFF)
        public ModbusStateMsg[] modbus_state;
        //  Custom msg for modbus state(refer to ModbusState.msg)
        public int access_control;
        //  
        public bool homming_completed;
        // 
        public bool tp_initialized;
        // 
        public sbyte mastering_need;
        // 
        public bool drl_stopped;
        // 
        public bool disconnected;
        // 
        // ____________________________________________________________________________________________
        //  The following messages have been updated since version M2.50 or higher.
        // ____________________________________________________________________________________________
        public double[] fActualW2B;
        //  world to base releation
        public Std.Float64MultiArrayMsg[] fCurrentPosW;
        //  Wolrd position actual value [2][6] : (0: tool, 1: flange) [mm, degree] 
        public double[] fCurrentVelW;
        //  World velocity Actual Value [mm/sec, degree/sec]
        public double[] fWorldETT;
        //  External Task Force/Torque [N, Nm]
        public double[] fTargetPosW;
        //  World target Position [mm, degree]
        public double[] fTargetVelW;
        //  World target Velocity [mm/sec, degree/sec]
        public Std.Float64MultiArrayMsg[] fRotationMatrixWorld;
        //  World rotation matrix [3][3]
        public sbyte iActualUCN;
        //  Actual user coord number ## 101 ~ 120
        public sbyte iParent;
        //  Coordinate Reference(base : 0  world : 2)
        public Std.Float64MultiArrayMsg[] fCurrentPosU;
        //  User position Actual Value [2][6] : (0:tool, 1:flange) [mm, degree]
        public double[] fCurrentVelU;
        //  User velocity Actual Value [mm/sec, degree/sec]
        public double[] fUserETT;
        //  External Task Force/Torque [N, Nm]
        public double[] fTargetPosU;
        //  User target Position [mm, degree]
        public double[] fTargetVelU;
        //  User target Velocity [mm/sec, degree/sec]
        public Std.Float64MultiArrayMsg[] fRotationMatrixUser;
        //  User rotation matrix [3][3] 
        public double[] fActualAI;
        //  Analog input data ## Current mode : 0~20.0[mA] , Voltage mode : 0~10.0[V]
        public bool[] bActualSW;
        //  Switch input data[3] 
        public bool[] bActualSI;
        //  Safety input data[2]
        public sbyte[] iActualAT;
        //  Analog input type[2]  index = channel, type: current(0), voltage(1)  
        public double[] fTargetAO;
        //  Analog output data ## Current mode : 0~20.0[mA] , Voltage mode : 0~10.0[V]
        public sbyte[] iTargetAT;
        //  Analog output type[2] index = channel, type: current(0), voltage(1)
        public bool[] bActualES;
        //  Encorder strove signal
        public sbyte[] iActualED;
        //  Encorder raw data   
        public bool[] bActualER;
        //  Encorder reset signal

        public RobotStateMsg()
        {
            this.robot_state = 0;
            this.robot_state_str = "";
            this.actual_mode = 0;
            this.actual_space = 0;
            this.current_posj = new double[6];
            this.current_velj = new double[6];
            this.joint_abs = new double[6];
            this.joint_err = new double[6];
            this.target_posj = new double[6];
            this.target_velj = new double[6];
            this.current_posx = new double[6];
            this.current_tool_posx = new double[6];
            this.current_velx = new double[6];
            this.task_err = new double[6];
            this.target_velx = new double[6];
            this.target_posx = new double[6];
            this.dynamic_tor = new double[6];
            this.actual_jts = new double[6];
            this.actual_ejt = new double[6];
            this.actual_ett = new double[6];
            this.actual_bk = new sbyte[6];
            this.actual_mc = new double[6];
            this.actual_mt = new double[6];
            this.solution_space = 0;
            this.sync_time = 0.0;
            this.actual_bt = new sbyte[5];
            this.rotation_matrix = new Std.Float64MultiArrayMsg[0];
            this.ctrlbox_digital_input = new sbyte[16];
            this.ctrlbox_digital_output = new sbyte[16];
            this.flange_digital_input = new sbyte[6];
            this.flange_digital_output = new sbyte[6];
            this.modbus_state = new ModbusStateMsg[0];
            this.access_control = 0;
            this.homming_completed = false;
            this.tp_initialized = false;
            this.mastering_need = 0;
            this.drl_stopped = false;
            this.disconnected = false;
            this.fActualW2B = new double[6];
            this.fCurrentPosW = new Std.Float64MultiArrayMsg[0];
            this.fCurrentVelW = new double[6];
            this.fWorldETT = new double[6];
            this.fTargetPosW = new double[6];
            this.fTargetVelW = new double[6];
            this.fRotationMatrixWorld = new Std.Float64MultiArrayMsg[0];
            this.iActualUCN = 0;
            this.iParent = 0;
            this.fCurrentPosU = new Std.Float64MultiArrayMsg[0];
            this.fCurrentVelU = new double[6];
            this.fUserETT = new double[6];
            this.fTargetPosU = new double[6];
            this.fTargetVelU = new double[6];
            this.fRotationMatrixUser = new Std.Float64MultiArrayMsg[0];
            this.fActualAI = new double[6];
            this.bActualSW = new bool[3];
            this.bActualSI = new bool[2];
            this.iActualAT = new sbyte[2];
            this.fTargetAO = new double[2];
            this.iTargetAT = new sbyte[2];
            this.bActualES = new bool[2];
            this.iActualED = new sbyte[2];
            this.bActualER = new bool[2];
        }

        public RobotStateMsg(int robot_state, string robot_state_str, sbyte actual_mode, sbyte actual_space, double[] current_posj, double[] current_velj, double[] joint_abs, double[] joint_err, double[] target_posj, double[] target_velj, double[] current_posx, double[] current_tool_posx, double[] current_velx, double[] task_err, double[] target_velx, double[] target_posx, double[] dynamic_tor, double[] actual_jts, double[] actual_ejt, double[] actual_ett, sbyte[] actual_bk, double[] actual_mc, double[] actual_mt, sbyte solution_space, double sync_time, sbyte[] actual_bt, Std.Float64MultiArrayMsg[] rotation_matrix, sbyte[] ctrlbox_digital_input, sbyte[] ctrlbox_digital_output, sbyte[] flange_digital_input, sbyte[] flange_digital_output, ModbusStateMsg[] modbus_state, int access_control, bool homming_completed, bool tp_initialized, sbyte mastering_need, bool drl_stopped, bool disconnected, double[] fActualW2B, Std.Float64MultiArrayMsg[] fCurrentPosW, double[] fCurrentVelW, double[] fWorldETT, double[] fTargetPosW, double[] fTargetVelW, Std.Float64MultiArrayMsg[] fRotationMatrixWorld, sbyte iActualUCN, sbyte iParent, Std.Float64MultiArrayMsg[] fCurrentPosU, double[] fCurrentVelU, double[] fUserETT, double[] fTargetPosU, double[] fTargetVelU, Std.Float64MultiArrayMsg[] fRotationMatrixUser, double[] fActualAI, bool[] bActualSW, bool[] bActualSI, sbyte[] iActualAT, double[] fTargetAO, sbyte[] iTargetAT, bool[] bActualES, sbyte[] iActualED, bool[] bActualER)
        {
            this.robot_state = robot_state;
            this.robot_state_str = robot_state_str;
            this.actual_mode = actual_mode;
            this.actual_space = actual_space;
            this.current_posj = current_posj;
            this.current_velj = current_velj;
            this.joint_abs = joint_abs;
            this.joint_err = joint_err;
            this.target_posj = target_posj;
            this.target_velj = target_velj;
            this.current_posx = current_posx;
            this.current_tool_posx = current_tool_posx;
            this.current_velx = current_velx;
            this.task_err = task_err;
            this.target_velx = target_velx;
            this.target_posx = target_posx;
            this.dynamic_tor = dynamic_tor;
            this.actual_jts = actual_jts;
            this.actual_ejt = actual_ejt;
            this.actual_ett = actual_ett;
            this.actual_bk = actual_bk;
            this.actual_mc = actual_mc;
            this.actual_mt = actual_mt;
            this.solution_space = solution_space;
            this.sync_time = sync_time;
            this.actual_bt = actual_bt;
            this.rotation_matrix = rotation_matrix;
            this.ctrlbox_digital_input = ctrlbox_digital_input;
            this.ctrlbox_digital_output = ctrlbox_digital_output;
            this.flange_digital_input = flange_digital_input;
            this.flange_digital_output = flange_digital_output;
            this.modbus_state = modbus_state;
            this.access_control = access_control;
            this.homming_completed = homming_completed;
            this.tp_initialized = tp_initialized;
            this.mastering_need = mastering_need;
            this.drl_stopped = drl_stopped;
            this.disconnected = disconnected;
            this.fActualW2B = fActualW2B;
            this.fCurrentPosW = fCurrentPosW;
            this.fCurrentVelW = fCurrentVelW;
            this.fWorldETT = fWorldETT;
            this.fTargetPosW = fTargetPosW;
            this.fTargetVelW = fTargetVelW;
            this.fRotationMatrixWorld = fRotationMatrixWorld;
            this.iActualUCN = iActualUCN;
            this.iParent = iParent;
            this.fCurrentPosU = fCurrentPosU;
            this.fCurrentVelU = fCurrentVelU;
            this.fUserETT = fUserETT;
            this.fTargetPosU = fTargetPosU;
            this.fTargetVelU = fTargetVelU;
            this.fRotationMatrixUser = fRotationMatrixUser;
            this.fActualAI = fActualAI;
            this.bActualSW = bActualSW;
            this.bActualSI = bActualSI;
            this.iActualAT = iActualAT;
            this.fTargetAO = fTargetAO;
            this.iTargetAT = iTargetAT;
            this.bActualES = bActualES;
            this.iActualED = iActualED;
            this.bActualER = bActualER;
        }

        public static RobotStateMsg Deserialize(MessageDeserializer deserializer) => new RobotStateMsg(deserializer);

        private RobotStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.robot_state);
            deserializer.Read(out this.robot_state_str);
            deserializer.Read(out this.actual_mode);
            deserializer.Read(out this.actual_space);
            deserializer.Read(out this.current_posj, sizeof(double), 6);
            deserializer.Read(out this.current_velj, sizeof(double), 6);
            deserializer.Read(out this.joint_abs, sizeof(double), 6);
            deserializer.Read(out this.joint_err, sizeof(double), 6);
            deserializer.Read(out this.target_posj, sizeof(double), 6);
            deserializer.Read(out this.target_velj, sizeof(double), 6);
            deserializer.Read(out this.current_posx, sizeof(double), 6);
            deserializer.Read(out this.current_tool_posx, sizeof(double), 6);
            deserializer.Read(out this.current_velx, sizeof(double), 6);
            deserializer.Read(out this.task_err, sizeof(double), 6);
            deserializer.Read(out this.target_velx, sizeof(double), 6);
            deserializer.Read(out this.target_posx, sizeof(double), 6);
            deserializer.Read(out this.dynamic_tor, sizeof(double), 6);
            deserializer.Read(out this.actual_jts, sizeof(double), 6);
            deserializer.Read(out this.actual_ejt, sizeof(double), 6);
            deserializer.Read(out this.actual_ett, sizeof(double), 6);
            deserializer.Read(out this.actual_bk, sizeof(sbyte), 6);
            deserializer.Read(out this.actual_mc, sizeof(double), 6);
            deserializer.Read(out this.actual_mt, sizeof(double), 6);
            deserializer.Read(out this.solution_space);
            deserializer.Read(out this.sync_time);
            deserializer.Read(out this.actual_bt, sizeof(sbyte), 5);
            deserializer.Read(out this.rotation_matrix, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.ctrlbox_digital_input, sizeof(sbyte), 16);
            deserializer.Read(out this.ctrlbox_digital_output, sizeof(sbyte), 16);
            deserializer.Read(out this.flange_digital_input, sizeof(sbyte), 6);
            deserializer.Read(out this.flange_digital_output, sizeof(sbyte), 6);
            deserializer.Read(out this.modbus_state, ModbusStateMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.access_control);
            deserializer.Read(out this.homming_completed);
            deserializer.Read(out this.tp_initialized);
            deserializer.Read(out this.mastering_need);
            deserializer.Read(out this.drl_stopped);
            deserializer.Read(out this.disconnected);
            deserializer.Read(out this.fActualW2B, sizeof(double), 6);
            deserializer.Read(out this.fCurrentPosW, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.fCurrentVelW, sizeof(double), 6);
            deserializer.Read(out this.fWorldETT, sizeof(double), 6);
            deserializer.Read(out this.fTargetPosW, sizeof(double), 6);
            deserializer.Read(out this.fTargetVelW, sizeof(double), 6);
            deserializer.Read(out this.fRotationMatrixWorld, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.iActualUCN);
            deserializer.Read(out this.iParent);
            deserializer.Read(out this.fCurrentPosU, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.fCurrentVelU, sizeof(double), 6);
            deserializer.Read(out this.fUserETT, sizeof(double), 6);
            deserializer.Read(out this.fTargetPosU, sizeof(double), 6);
            deserializer.Read(out this.fTargetVelU, sizeof(double), 6);
            deserializer.Read(out this.fRotationMatrixUser, Std.Float64MultiArrayMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.fActualAI, sizeof(double), 6);
            deserializer.Read(out this.bActualSW, sizeof(bool), 3);
            deserializer.Read(out this.bActualSI, sizeof(bool), 2);
            deserializer.Read(out this.iActualAT, sizeof(sbyte), 2);
            deserializer.Read(out this.fTargetAO, sizeof(double), 2);
            deserializer.Read(out this.iTargetAT, sizeof(sbyte), 2);
            deserializer.Read(out this.bActualES, sizeof(bool), 2);
            deserializer.Read(out this.iActualED, sizeof(sbyte), 2);
            deserializer.Read(out this.bActualER, sizeof(bool), 2);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.robot_state);
            serializer.Write(this.robot_state_str);
            serializer.Write(this.actual_mode);
            serializer.Write(this.actual_space);
            serializer.Write(this.current_posj);
            serializer.Write(this.current_velj);
            serializer.Write(this.joint_abs);
            serializer.Write(this.joint_err);
            serializer.Write(this.target_posj);
            serializer.Write(this.target_velj);
            serializer.Write(this.current_posx);
            serializer.Write(this.current_tool_posx);
            serializer.Write(this.current_velx);
            serializer.Write(this.task_err);
            serializer.Write(this.target_velx);
            serializer.Write(this.target_posx);
            serializer.Write(this.dynamic_tor);
            serializer.Write(this.actual_jts);
            serializer.Write(this.actual_ejt);
            serializer.Write(this.actual_ett);
            serializer.Write(this.actual_bk);
            serializer.Write(this.actual_mc);
            serializer.Write(this.actual_mt);
            serializer.Write(this.solution_space);
            serializer.Write(this.sync_time);
            serializer.Write(this.actual_bt);
            serializer.WriteLength(this.rotation_matrix);
            serializer.Write(this.rotation_matrix);
            serializer.Write(this.ctrlbox_digital_input);
            serializer.Write(this.ctrlbox_digital_output);
            serializer.Write(this.flange_digital_input);
            serializer.Write(this.flange_digital_output);
            serializer.WriteLength(this.modbus_state);
            serializer.Write(this.modbus_state);
            serializer.Write(this.access_control);
            serializer.Write(this.homming_completed);
            serializer.Write(this.tp_initialized);
            serializer.Write(this.mastering_need);
            serializer.Write(this.drl_stopped);
            serializer.Write(this.disconnected);
            serializer.Write(this.fActualW2B);
            serializer.WriteLength(this.fCurrentPosW);
            serializer.Write(this.fCurrentPosW);
            serializer.Write(this.fCurrentVelW);
            serializer.Write(this.fWorldETT);
            serializer.Write(this.fTargetPosW);
            serializer.Write(this.fTargetVelW);
            serializer.WriteLength(this.fRotationMatrixWorld);
            serializer.Write(this.fRotationMatrixWorld);
            serializer.Write(this.iActualUCN);
            serializer.Write(this.iParent);
            serializer.WriteLength(this.fCurrentPosU);
            serializer.Write(this.fCurrentPosU);
            serializer.Write(this.fCurrentVelU);
            serializer.Write(this.fUserETT);
            serializer.Write(this.fTargetPosU);
            serializer.Write(this.fTargetVelU);
            serializer.WriteLength(this.fRotationMatrixUser);
            serializer.Write(this.fRotationMatrixUser);
            serializer.Write(this.fActualAI);
            serializer.Write(this.bActualSW);
            serializer.Write(this.bActualSI);
            serializer.Write(this.iActualAT);
            serializer.Write(this.fTargetAO);
            serializer.Write(this.iTargetAT);
            serializer.Write(this.bActualES);
            serializer.Write(this.iActualED);
            serializer.Write(this.bActualER);
        }

        public override string ToString()
        {
            return "RobotStateMsg: " +
            "\nrobot_state: " + robot_state.ToString() +
            "\nrobot_state_str: " + robot_state_str.ToString() +
            "\nactual_mode: " + actual_mode.ToString() +
            "\nactual_space: " + actual_space.ToString() +
            "\ncurrent_posj: " + System.String.Join(", ", current_posj.ToList()) +
            "\ncurrent_velj: " + System.String.Join(", ", current_velj.ToList()) +
            "\njoint_abs: " + System.String.Join(", ", joint_abs.ToList()) +
            "\njoint_err: " + System.String.Join(", ", joint_err.ToList()) +
            "\ntarget_posj: " + System.String.Join(", ", target_posj.ToList()) +
            "\ntarget_velj: " + System.String.Join(", ", target_velj.ToList()) +
            "\ncurrent_posx: " + System.String.Join(", ", current_posx.ToList()) +
            "\ncurrent_tool_posx: " + System.String.Join(", ", current_tool_posx.ToList()) +
            "\ncurrent_velx: " + System.String.Join(", ", current_velx.ToList()) +
            "\ntask_err: " + System.String.Join(", ", task_err.ToList()) +
            "\ntarget_velx: " + System.String.Join(", ", target_velx.ToList()) +
            "\ntarget_posx: " + System.String.Join(", ", target_posx.ToList()) +
            "\ndynamic_tor: " + System.String.Join(", ", dynamic_tor.ToList()) +
            "\nactual_jts: " + System.String.Join(", ", actual_jts.ToList()) +
            "\nactual_ejt: " + System.String.Join(", ", actual_ejt.ToList()) +
            "\nactual_ett: " + System.String.Join(", ", actual_ett.ToList()) +
            "\nactual_bk: " + System.String.Join(", ", actual_bk.ToList()) +
            "\nactual_mc: " + System.String.Join(", ", actual_mc.ToList()) +
            "\nactual_mt: " + System.String.Join(", ", actual_mt.ToList()) +
            "\nsolution_space: " + solution_space.ToString() +
            "\nsync_time: " + sync_time.ToString() +
            "\nactual_bt: " + System.String.Join(", ", actual_bt.ToList()) +
            "\nrotation_matrix: " + System.String.Join(", ", rotation_matrix.ToList()) +
            "\nctrlbox_digital_input: " + System.String.Join(", ", ctrlbox_digital_input.ToList()) +
            "\nctrlbox_digital_output: " + System.String.Join(", ", ctrlbox_digital_output.ToList()) +
            "\nflange_digital_input: " + System.String.Join(", ", flange_digital_input.ToList()) +
            "\nflange_digital_output: " + System.String.Join(", ", flange_digital_output.ToList()) +
            "\nmodbus_state: " + System.String.Join(", ", modbus_state.ToList()) +
            "\naccess_control: " + access_control.ToString() +
            "\nhomming_completed: " + homming_completed.ToString() +
            "\ntp_initialized: " + tp_initialized.ToString() +
            "\nmastering_need: " + mastering_need.ToString() +
            "\ndrl_stopped: " + drl_stopped.ToString() +
            "\ndisconnected: " + disconnected.ToString() +
            "\nfActualW2B: " + System.String.Join(", ", fActualW2B.ToList()) +
            "\nfCurrentPosW: " + System.String.Join(", ", fCurrentPosW.ToList()) +
            "\nfCurrentVelW: " + System.String.Join(", ", fCurrentVelW.ToList()) +
            "\nfWorldETT: " + System.String.Join(", ", fWorldETT.ToList()) +
            "\nfTargetPosW: " + System.String.Join(", ", fTargetPosW.ToList()) +
            "\nfTargetVelW: " + System.String.Join(", ", fTargetVelW.ToList()) +
            "\nfRotationMatrixWorld: " + System.String.Join(", ", fRotationMatrixWorld.ToList()) +
            "\niActualUCN: " + iActualUCN.ToString() +
            "\niParent: " + iParent.ToString() +
            "\nfCurrentPosU: " + System.String.Join(", ", fCurrentPosU.ToList()) +
            "\nfCurrentVelU: " + System.String.Join(", ", fCurrentVelU.ToList()) +
            "\nfUserETT: " + System.String.Join(", ", fUserETT.ToList()) +
            "\nfTargetPosU: " + System.String.Join(", ", fTargetPosU.ToList()) +
            "\nfTargetVelU: " + System.String.Join(", ", fTargetVelU.ToList()) +
            "\nfRotationMatrixUser: " + System.String.Join(", ", fRotationMatrixUser.ToList()) +
            "\nfActualAI: " + System.String.Join(", ", fActualAI.ToList()) +
            "\nbActualSW: " + System.String.Join(", ", bActualSW.ToList()) +
            "\nbActualSI: " + System.String.Join(", ", bActualSI.ToList()) +
            "\niActualAT: " + System.String.Join(", ", iActualAT.ToList()) +
            "\nfTargetAO: " + System.String.Join(", ", fTargetAO.ToList()) +
            "\niTargetAT: " + System.String.Join(", ", iTargetAT.ToList()) +
            "\nbActualES: " + System.String.Join(", ", bActualES.ToList()) +
            "\niActualED: " + System.String.Join(", ", iActualED.ToList()) +
            "\nbActualER: " + System.String.Join(", ", bActualER.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
